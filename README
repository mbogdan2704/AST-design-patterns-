Maria Costin Bogdan, 323CB

	Prima data, am construit o interfata, SimpleNode, care o vor implementa toate nodurile "simple".Prin noduri simple ma refer la noduri care nu au fost inca decorate, iar acestea contin doar o metoda comuna, denumita getType().Am gandit asa deoarece toate nodurile au comun acest lucru, iar dupa, cu ajutorul decoratorului o sa adaug particularitati fiecarui nod in parte.Dupa ce am definit aceasta metoda pentru fiecare nod simplu, am construit o clasa abstracta, NodeDecorator, care imi contine mie toate metodele specificice fiecarui nod deecorat.Aceasta implementeaza SimpleNode, si contine ca atribut o referinta la un nod Simplu.Apoi, fiecare nod in parte va extinde aceasta interfata abastracta, si va implementa doar metodele care ii trebuie.De exemplu, nodul de tipul plus va trebui sa aiba metode pentru a seta nodul din stanga, din dreapta, si a accesa nodurile din stanga si din dreapta, metode care se cheama setSt,setDr etc.Aceste metode sunt implementate in clasa PlusNodeDecorator.Totodata, nodul de tip plus are nevoie de metoda getType, care este continuta intr-un SimpleNode.De aceea, in clasa NodeDecorator eu am salvat o referinta la nodul SimpleNode de tipul Plus.
	Dupa ce mi-am definit in modul asta clasele, in main, am luat inputul si l-am bagat intr-o coada, pentru a imi fi mai usor de prelucrat.Dupa ce am construit coada, apelez functia de creare arbore.Functia de construirea a arborelui functioneaza recursiv, fiecare nivel de recursivitate "pasand" coada cu operatii(ce a mai ramas de citit din ea).Dupa ce am construit arborele, urmeaza evaluarea arborelui, care o fac printr-un Visitor.Fiecare clasa are metoda accept, care imi va returna un NodeDecorator.Apoi, in clasa EvaluateVisitor, am metodele visit, care apeleaza recursiv nodurile fii, apeland metoda accept, iar dupa ce se obtine informatia din nodurile fii este construita informatia care va fi pasata mai sus in arbore.

Abordarea este cea de tip greedy, pe checkerul local imi functioneaza toate testele.
